{"version":3,"sources":["components/HexClock.js","App.js","serviceWorker.js","index.js"],"names":["HexClock","state","hours","Date","getHours","minutes","getMinutes","seconds","getSeconds","newSeconds","hex","this","setState","toString","concat","_this2","setInterval","currentTime","react_default","a","createElement","style","backgroundColor","minHeight","minWidth","textAlign","className","color","fontSize","fontWeight","webkitTextStroke","display","marginTop","cursor","Component","App","HexClock_HexClock","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEqBA,6MAEjBC,MAAQ,CAEJC,OAAO,IAAIC,MAAOC,WAClBC,SAAS,IAAIF,MAAOG,aACpBC,SAAS,IAAIJ,MAAOK,aACpBC,WAAY,GACZC,IAAK,iFAMLC,KAAKC,SAAS,CACVL,SAAS,IAAIJ,MAAOK,aAAaK,WACjCR,SAAS,IAAIF,MAAOG,aAAaO,WACjCX,OAAO,IAAIC,MAAOC,WAAWS,aAIjCF,KAAKC,SAAS,CACVF,IAAG,IAAAI,OAAMH,KAAKV,MAAMC,OAAjBY,OAAyBH,KAAKV,MAAMI,SAApCS,OAA8CH,KAAKV,MAAMM,wDAK/C,IAAAQ,EAAAJ,KACjBK,YAAY,kBAAMD,EAAKE,eAAe,sCAItC,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CACRC,gBAAiBX,KAAKV,MAAMS,IAC5Ba,UAAW,QACXC,SAAU,QACVC,UAAW,WAIXP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,eAAf,iBACmBf,KAAKV,MAAMC,MAD9B,IACsCS,KAAKV,MAAMI,QADjD,IAC2DM,KAAKV,MAAMM,SAItEW,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CACTM,MAAO,QACPC,SAAU,MACVC,WAAY,OACZC,iBAAkB,YAClBC,QAAS,eACTC,UAAW,OACXC,OAAQ,YAEPtB,KAAKV,MAAMS,KAGhBQ,EAAAC,EAAAC,cAAA,OACIM,UAAU,YACVL,MAAO,CACHO,SAAU,QAHlB,yBA3DsBM,aCEjBC,0LAEjB,OACEjB,EAAAC,EAAAC,cAACgB,EAAD,aAH2BF,cCQbG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.204941f2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class HexClock extends Component {\r\n\r\n    state = {\r\n        // Set state to show initial time\r\n        hours: new Date().getHours(),\r\n        minutes: new Date().getMinutes(),\r\n        seconds: new Date().getSeconds(),\r\n        newSeconds: \"\",\r\n        hex: \"\",\r\n    };\r\n\r\n\r\n    currentTime() {\r\n        // Set state to current hours, minutes, seconds\r\n        this.setState({\r\n            seconds: new Date().getSeconds().toString(),\r\n            minutes: new Date().getMinutes().toString(),\r\n            hours: new Date().getHours().toString(),\r\n        });\r\n\r\n        // Set state to concatenated string for color hex code\r\n        this.setState({\r\n            hex: `#${this.state.hours}${this.state.minutes}${this.state.seconds}`\r\n        });\r\n    };\r\n\r\n    // Updates every 1 second\r\n    componentWillMount() {\r\n        setInterval(() => this.currentTime(), 1000);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            // In-line style set background to hex color code\r\n            <div style={{\r\n                backgroundColor: this.state.hex,\r\n                minHeight: \"100vh\",\r\n                minWidth: \"100vw\",\r\n                textAlign: 'center',\r\n            }}>\r\n\r\n                {/* Display current time */}\r\n                <div className='currentTime'>\r\n                    current time: {this.state.hours}:{this.state.minutes}:{this.state.seconds}\r\n                </div>\r\n\r\n                {/* Display hex code */}\r\n                <span style={{\r\n                    color: 'white',\r\n                    fontSize: '3em',\r\n                    fontWeight: 'bold',\r\n                    webkitTextStroke: '3px black',\r\n                    display: 'inline-block',\r\n                    marginTop: '40vh',\r\n                    cursor: 'default',\r\n                }}>\r\n                    {this.state.hex}\r\n                </span>\r\n\r\n                <div\r\n                    className='heartbeat'\r\n                    style={{\r\n                        fontSize: '1em',\r\n                    }}>\r\n                    by Kevin Yang\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    };\r\n};","import React, { Component } from 'react';\r\nimport HexClock from \"./components/HexClock\";\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <HexClock />\r\n    );\r\n  };\r\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}